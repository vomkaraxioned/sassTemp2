//wrapper mixin params:large/anything,width
@mixin wrapper($suffix:false, $width) {
  $class: wrapper;

  @if $suffix {
    $class : wrapper-#{$suffix};
  }

  .#{$class} {
    width: $width;
    margin: $autoMargin;
  }
}

//backgroundImage params:url,rgba,overlay(boolean)
@mixin backgroundImage($url, $rgba, $overlay) {

  background: url($url) $rgba center no-repeat;
  background-size: cover;

  @if $overlay {
    background-blend-mode: overlay;
  }
}

@mixin icon($content, $textIndent:false) {
  font-family: 'FontAwesome';
  font-weight: 900;

  @if $textIndent {
    float: right;
    text-indent: 0;
  }

  content: $content;
}

@mixin flex($isFlex:false, $flexBasis:false, $isHCenter:false, $isVCenter:false, $isVDirection:false, $isWrap:false, $flexOrder:false) {
  @if $isFlex {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
  }

  @if $isVCenter {
    -webkit-box-align: $isVCenter;
    -moz-box-align: $isVCenterr;
    -ms-flex-align: $isVCenter;
    -webkit-align-items: $isVCenter;
    align-items: $isVCenter;
  }

  @if $flexBasis {
    flex-basis: $flexBasis;
  }

  @if $isVDirection {
    flex-direction: $isVDirection;
  }

  @if $isWrap {
    -webkit-flex-wrap: $isWrap$isWrap$isWrap$isWrap$isWrap;
    -moz-flex-wrap: $isWrap$isWrap$isWrap$isWrapp;
    -ms-flex-wrap: $isWrap$isWrap$isWrap;
    -o-flex-wrap: $isWrap$isWrap;
    flex-wrap: $isWrap;
  }

  @if $isHCenter {
    justify-content: $isHCenter;
  }

  @if $flexOrder {
    -webkit-box-ordinal-group: $flexOrder$flexOrder$flexOrder$flexOrder$flexOrder;
    -moz-box-ordinal-group: $flexOrder$flexOrder$flexOrder$flexOrder;
    -ms-flex-order: $flexOrder$flexOrder$flexOrder;
    -webkit-order: $flexOrder$flexOrder;
    order: $flexOrder;
  }
}

@mixin img($objFit) {
  img {
    width: 100%;
    height: auto;
    -o-object-fit: $objFit;
    object-fit: $objFit;
    object-position: center;
  }
}

@mixin boxModel($width:false, $height:false) {
  @if $width {
    width: $width;
  }

  @if $height {
    height: $height;
  }
}

@mixin display($display:false, $float:false, $zIndex:false, $overflow:false) {
  @if $display {
    display: $display;
  }

  @if $float {
    float: $float;
  }

  @if $zIndex {
    z-index: $zIndex;
  }

  @if $overflow {
    overflow: $overflow;
  }
}

@mixin position($position, $top:false, $right:false, $bottom:false, $left:false) {
  position: $position;

  @if $position==absolute {
    @if $top {
      top: $top;
    }

    @if $right {
      right: $right;
    }

    @if $bottom {
      bottom: $bottom;
    }

    @if $left {
      left: $left;
    }
  }
}

@mixin font($color:false, $family:false, $size:false, $weight:false, $text:false, $textAlign:false) {
  @if $color {
    color: $color;
  }

  @if $family {
    font-family: $family;
  }

  @if $size {
    font-size: $size;
  }

  @if $weight {
    font-weight: $weight;
  }

  @if $textAlign {
    text-align: $textAlign;
  }

  @if $text {
    text-transform: $text;
  }
}

@mixin border($border:false, $borderRadius:false) {
  @if $border {
    border: $border;
  }

  @if $borderRadius {
    border-radius: $borderRadius;
  }
}

@mixin prefix($property, $value) {
  -moz-#{$property}: $value;
  -webkit-#{$property}: $value;
  -o-#{$property}: $value;
  -ms-#{$property}: $value;
  #{$propert}: $value;
}

@mixin transition($property, $time, $func) {
  -webkit-transition: $property $time $func;
  -moz-transition: $property $time $func;
  -ms-transition: $property $time $func;
  -o-transition: $property $time $func;
  transition: $property $time $func;
}

@mixin  breakpoint($min,$max) {
  @media screen and (min-device-width: $min) and (max-device-width: $max) { 
    @content;
}
}

@mixin  responsive($device) {
  @media only screen and (max-width: $device) {
    @content;
}
}

@mixin  reverseResponsive($device) {
  @media only screen and (min-width: $device) {
    @content;
}
}

@mixin hover($bgcolor,$color) {
  :hover {
    background-color: $bgcolor;
    color: $color;
  }
}